package com.qaprosoft.argon.dbaccess.dao;

import com.qaprosoft.argon.dbaccess.dao.mysql.SettingDAO;
import com.qaprosoft.argon.dbaccess.dao.mysql.StatusDAO;
import com.qaprosoft.argon.dbaccess.dao.mysql.UserDAO;
import com.qaprosoft.argon.dbaccess.utils.KeyGenerator;
import com.qaprosoft.argon.models.db.Setting;
import com.qaprosoft.argon.models.db.Status;
import com.qaprosoft.argon.models.db.User;
import org.joda.time.DateTime;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.testng.AbstractTestNGSpringContextTests;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import java.util.Date;
import static org.testng.Assert.assertEquals;
import static org.testng.Assert.assertNotEquals;
import static org.testng.Assert.assertNull;

/**
 * @author kbugrim
 * @since 09 Dec 2017
 */
@Test
@ContextConfiguration("classpath:com/qaprosoft/argon/dbaccess/dbaccess-test.xml")
public class SettingDAOTest extends AbstractTestNGSpringContextTests
{

	private static final boolean ENABLED = false;

	@Autowired
	private SettingDAO settingDAO;

	@Autowired
	private UserDAO userDAO;

	@Autowired
	private StatusDAO statusDAO;

	private static final User USER = new User();
	{
		USER.setEnabled(true);
		USER.setEmail(KeyGenerator.getKey() + "@test-mail.com");
		USER.setDob(new Date());
		USER.setFirstName("Boris");
		USER.setLastName("The Blade");
		USER.setPassword("pass" + KeyGenerator.getKey().toString());
		USER.setDob(DateTime.now().withTime(0, 0, 0, 0).minusYears(18).toDate());
		USER.setUsername("user" + KeyGenerator.getKey());
		USER.setVerified(true);
	}

	private static final Setting SETTING = new Setting();
	{
		SETTING.setNews(true);
		SETTING.setSound(false);
	}

	@BeforeClass
	public void init()
	{
		USER.setStatus(statusDAO.getStatusByType(Status.Type.OFFLINE));
		userDAO.createUser(USER);
	}

	@AfterClass
	public void delete()
	{
		userDAO.deleteUserById(USER.getId());
	}

	@Test(enabled = ENABLED)
	public void createSetting()
	{
		SETTING.setUserId(USER.getId());
		settingDAO.createSetting(SETTING);
		assertNotEquals(SETTING.getId(), 0, "Setting ID must be set up by autogenerated keys.");
	}

	@Test(enabled = ENABLED, dependsOnMethods = "createSetting")
	public void getSettingById()
	{
		checkSetting(settingDAO.getSettingById(SETTING.getId()));
	}

	@Test(enabled = ENABLED, dependsOnMethods = "createSetting")
	public void updateSetting()
	{
		SETTING.setNews(false);
		SETTING.setSound(true);
		settingDAO.updateSetting(SETTING);
		checkSetting(settingDAO.getSettingById(SETTING.getId()));
	}

	@Test(enabled = ENABLED, dependsOnMethods =
	{ "createSetting", "getSettingById", "updateSetting" })
	public void deleteSettingById()
	{
		settingDAO.deleteSettingById(SETTING.getId());
		assertNull(settingDAO.getSettingById(SETTING.getId()));
	}

	private void checkSetting(Setting setting)
	{
		assertEquals(setting.getNews(), SETTING.getNews(), "Setting news is not as expected.");
		assertEquals(setting.getSound(), SETTING.getSound(), "Setting sound is not as expected.");
	}
}
